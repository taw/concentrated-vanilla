#!/usr/bin/env ruby

require 'pp'

class EDB
  attr_reader :path, :levels, :levels1, :levels2

  def initialize
    @path = "output/mods/concentrated_vanilla/data/export_descr_buildings.txt"
    @levels1 = %W[wooden_pallisade wooden_wall stone_wall large_stone_wall huge_stone_wall]
    @levels2 = %W[motte_and_bailey wooden_castle castle fortress citadel]
    @levels2 = []
    @levels = @levels1 + @levels2
  end
  
  def data
    @data ||= File.read(path).gsub("\r", "").split("\n").map(&:strip)
  end
  
  def capa_by_level
    unless @capa_by_level
      @capa_by_level = {}
      lines = data.dup
      until lines.empty?
        line = lines.shift
        word0 = line[/\A\S+/]
        next unless levels.include?(word0)
        cnt = 0
        caps = []
        until cnt == 0 and !caps.empty?
          x = lines.shift
          caps << x
          if x == "{"
            cnt += 1
          elsif x == "}"
            cnt -= 1
          end
        end
        @capa_by_level[word0] = caps
      end
    end
    @capa_by_level
  end

  def parse_reqs(reqs)
    raise "Parse error: #{reqs}" unless reqs =~ /\Arequires\s+factions\s+\{(.*?)\}(.*)\z/
    factions, rest = $1.strip, $2
    [factions.split(/,\s*/), rest]
  end

  def recruit_by_level
    unless @recruit_by_level
      @recruit_by_level = {}
      capa_by_level.each{|key, lines|
        @recruit_by_level[key] = []
        lines.each{|line|
          next unless line =~ /\Arecruit_pool\s+"(.*?)"\s+(\d+)\s+(\d+\.\d+)\s+(\d+)\s+(\d+)\s+(.*)/
          factions, other_reqs = parse_reqs($6)
          @recruit_by_level[key] << {
            :name => $1,
            :initial => $2.to_i,
            :rate => $3.to_f,
            :max  => $4.to_i,
            :exp  => $5.to_i,
            :factions => factions,
            :other_reqs => other_reqs,
          }
        }
      }
    end
    @recruit_by_level
  end
  
  def pools(level, faction)
    recruit_by_level[level].select{|pool| pool[:factions].include?(faction)}.map{|pool| pool[:name]}.uniq
  end
end


def diff(newlist, oldlist)
  added   = (newlist - oldlist).sort
  removed = (oldlist - newlist).sort
  (added + removed.map{|x| "-#{x}"})*", "
end

# Ignore slave, aztecs
factions = %W[
  england
  france
  hre
  spain
  venice

  sicily
  milan
  scotland
  byzantium
  russia
  moors
  turks
  egypt
  denmark
  portugal
  poland
  hungary

  papal_states
  mongols
  timurids
]

edb = EDB.new

#pp edb.capa_by_level
#pp edb.levels
#pp edb.recruit_by_level

factions.each{|faction|
  puts "Faction #{faction}"
  units = []
  edb.levels1.each{|level|
    level_units = edb.pools(level, faction)
    puts "* #{level}: #{diff(level_units, units)}"
    units = level_units
  }
  unless edb.levels2.empty?
    puts ""
    units = []
    edb.levels2.each{|level|
      level_units = edb.pools(level, faction)
      puts "* #{level}: #{diff(level_units, units)}"
      units = level_units
    }
  end

  puts ""
}
